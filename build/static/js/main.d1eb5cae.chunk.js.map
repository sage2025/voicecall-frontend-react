{"version":3,"sources":["../node_modules/peerjs/dist sync","assets/colors.ts","utils/peer.ts","utils/socket.ts","utils/room.ts","hooks/useRtc.ts","components/Section.tsx","components/Navbar.tsx","components/CallUser.tsx","utils/constants.ts","components/Room.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","blue","black","white","room","port","window","location","peer","Peer","Math","random","toString","substr","host","hostname","path","debug","socketUrl","socket","io","getConnections","Promise","reject","a","fetch","response","json","data","console","log","getUserRoom","connections","userConnection","find","connection","peers","peerClient","undefined","nameMissing","Swal","fire","title","text","icon","idLengthToSmall","roomIsNotExist","useRtc","useState","localStream","setLocalStream","setRoom","useEffect","on","call","answer","playAudio","error","navigator","mediaDevices","getUserMedia","audio","stream","forEach","audioctx","AudioContext","createMediaStreamSource","connect","destination","connectToRoom","name","length","conn","peerName","emit","color","floor","leaveFromRoom","createRoom","Wrapper","styled","div","Title","h1","Description","p","Actions","Input","input","Button","button","isBigButton","css","Section","firstTitlePart","secondTitlePart","description","isInput","isSmallButton","smallButtonIcon","bigButtonText","inputPlaceholder","onBigButtonClick","onSmallButtonClick","inputValue","setInputValue","placeholder","onChange","preventDefault","target","value","toUpperCase","onClick","nav","Selects","Brand","span","Navbar","setName","useContext","AppContext","CallWindowUser","bg","Avatar","img","Nickname","CallUser","src","RTCWindow","CallWindow","usersCount","PanelButtons","LeaveButton","Room","isDesktop","useMediaQuery","query","wrapper","useRef","useVoice","gsap","set","current","zIndex","to","duration","ease","opacity","then","ref","map","faPhoneSlash","Global","createGlobalStyle","Sections","createContext","userRoom","setUserRoom","App","setUsername","setUserConnection","fetchUserRoom","userConn","sections","Helmet","rel","href","Provider","newName","faSignInAlt","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d1eb5cae.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 63;","export const blue: string = \"#3C91E6\";\nexport const orange: string = \"#FA824C\";\nexport const green: string = \"#A2D729\";\nexport const black: string = \"#342E37\";\nexport const white: string = \"#FAFFFD\";\n\nexport const room = {\n    darkest: \"#0A0A0A\",\n    darker: \"#141414\",\n    light: \"#1F1F1F\",\n    blue: \"#0011FF\",\n    red: \"#FF3131\",\n    green: \"#00E600\",\n}","import Peer from \"peerjs\";\n\nconst port: number | string = process.env.NODE_ENV === 'production' ? window.location.port : 443;\n\nconst customGenerationFunction = () => (Math.random().toString(36) + '0000000000000000000').substr(2, 16);\n\nconst peer = new Peer(customGenerationFunction(), {\n    host: window.location.hostname,\n    // @ts-expect-error\n    port: port,\n    path: \"/rtc\",\n    debug: 1,\n});\n\nexport default peer;","import { io, Socket } from \"socket.io-client\";\n\nconst port: string = process.env.NODE_ENV === 'production' ? \"\" : \":8080\"\n\nconst socketUrl: string = `${window.location.hostname}${port}`;\nconst socket: Socket =  io(socketUrl);\n\nexport default socket;","import peer from \"./peer\";\n\nexport interface Connection {\n    room: string,\n    peers: Name[]\n}\n\nexport interface Name {\n    name: string,\n    id: string,\n    color: string\n}\n\nexport interface ApiConnections {\n    connections: Connection[],\n}\n\nexport const getConnections = (): Promise<ApiConnections> => {\n    return new Promise(async ( resolve, reject ) => {\n        try {\n            const response: Response = await fetch(\"/api/rooms\");\n            const data: ApiConnections = await response.json();\n            resolve(data);\n        } catch (error) {\n            reject(error);\n            console.log(error);\n        }\n    })\n}\n\nexport const getUserRoom = (): Promise<Connection | undefined> => {\n    return new Promise(async ( resolve, reject ) => {\n        const { connections } = await getConnections();\n        const userConnection: Connection | undefined = \n            connections.find(( connection: Connection ) => connection.peers.find(( peerClient: Name ) => peerClient?.id === peer.id));\n        \n        if(userConnection){\n            resolve(userConnection);\n            return;\n        }\n\n        resolve(undefined);\n    })\n}","import { useEffect, useState } from \"react\";\nimport peer from \"../utils/peer\";\nimport socket from \"../utils/socket\";\nimport Swal from \"sweetalert2\";\nimport { Connection, getConnections, getUserRoom, Name } from \"../utils/room\";\nimport Peer from \"peerjs\";\n\nconst nameMissing = () => Swal.fire({\n    title: `What's your name ?`,\n    text: \"Pss... You need to fill name input with your name!\",\n    icon: \"error\"\n})\n\nconst idMissing = () => Swal.fire({\n    title: \"Ooops! You forgot to set room id!\",\n    text: \"Mamma Mia! 🍕 🍝\",\n    icon: \"error\"\n})\n\nconst idLengthToSmall = () => Swal.fire({\n    title: \"Room id length is too small 😒\",\n    text: \"Ah shit, here we go again.\",\n    icon: \"error\"\n})\n\nconst roomIsNotExist = ( id: string ) => Swal.fire({\n    title: `Room: ${id} is not existing 😢`,\n    text: \"Maybe it's typo.\",\n    icon: \"error\"\n})\n\nconst roomIsAlreadyExist = () => Swal.fire({\n    title: \"Room is already exist! 😫\",\n    text: \"Oh! No!\",\n    icon: \"error\"\n})\n\nconst nameAlreadyExist = () => Swal.fire({\n    title: \"Ahhh! Your name is already taken in this room 😫\",\n    text: \"Change it and try again.\",\n    icon: \"error\"\n});\n\nconst useRtc = () => {\n    const [ localStream, setLocalStream ] = useState<MediaStream>();\n    const [ room, setRoom ] = useState<Connection>();\n\n    useEffect(() => {\n        socket.on(\"onJoinToRoom\", async ( connection: Connection ) => {\n            call(connection);\n            const userConnection: Connection | undefined = await getUserRoom();\n            setRoom(userConnection);\n        })\n\n        socket.on(\"leftFromRoom\", async ({ id, peer }: { id: string, peer: Name }) => {\n            const userConnection: Connection | undefined = await getUserRoom();\n            setRoom(userConnection);\n        })\n    }, [ ])\n\n    useEffect(() => {\n        if(localStream){\n            peer.on(\"call\", async ( call: Peer.MediaConnection ) => {\n                call.answer(localStream);\n                call.on(\"stream\", playAudio);\n\n                call.on(\"error\", () => console.error(\"peer error\"));\n            })\n        }\n    }, [ localStream ])\n    \n    const call = async ( connection: Connection ) => {\n        const stream: MediaStream = await navigator.mediaDevices.getUserMedia({ audio: true });\n        setLocalStream(stream);\n\n        connection.peers.forEach(( peerClient: Name ) => {\n            if(peerClient?.id !== peer.id){\n                const call = peer.call(peerClient?.id, stream);\n                call?.on('stream', playAudio);\n\n                call.on(\"close\", () => console.log(`${peerClient?.id} closed call`))\n                call.on(\"error\", () => console.error(\"peer error\"));\n            }\n        })\n    }\n\n    const playAudio = ( stream: MediaStream ) => {\n        const audioctx: AudioContext = new AudioContext();\n        const src: MediaStreamAudioSourceNode = audioctx.createMediaStreamSource(stream);\n\n        src.connect(audioctx.destination);\n    }\n\n    const connectToRoom = async ( id: string, name: string | undefined ) => {\n        if(!name){\n            nameMissing();\n            return;\n        }\n\n        if(id.length < 5){\n            idLengthToSmall();\n            return;\n        }\n\n        const { connections } = await getConnections();\n\n        if(!connections.find(( conn: Connection ) => conn.room === id)){\n            roomIsNotExist(id);\n            return;\n        }\n        \n        if(connections.find(( conn: Connection ) => conn.peers.find(( peerName: Name ) => peerName?.name === name))){\n            nameAlreadyExist();\n            return;\n        }       \n\n        socket.emit(\"joinToRoom\", { id, peer: peer.id, name, color: `#${Math.floor(Math.random()*16777215).toString(16)}` });\n    }\n\n    const leaveFromRoom = async () => {\n        const userConnection: Connection | undefined = await getUserRoom();\n\n        userConnection &&\n            socket.emit(\"leaveFromRoom\", { id: userConnection.room, peer: peer.id });\n    };\n\n    const createRoom = ( id: string, name: string | undefined ) => {\n        return new Promise(async ( resolve, reject ) => {\n            const { connections } = await getConnections();\n\n            if(!name){\n                nameMissing();\n                reject();\n                return;\n            }\n\n            if(!id){\n                idMissing();\n                reject();\n                return;\n            }\n\n            if(id.length < 5){\n                idLengthToSmall();\n                reject();\n                return;\n            }\n\n            if(connections.find(( conn: Connection ) => conn.room === id)){\n                roomIsAlreadyExist();\n                reject();\n                return;\n            }\n\n            socket.emit(\"createRoom\", { id, peer: peer.id });\n            resolve({ id, peer: peer.id });\n        })\n    }\n\n    return { connectToRoom, leaveFromRoom, createRoom, room }\n}\n\nexport default useRtc;","import React, { FC, useState, ChangeEvent } from \"react\";\nimport styled, { css } from \"styled-components\";\nimport { black } from \"../assets/colors\";\nimport { FontAwesomeIcon, FontAwesomeIconProps } from \"@fortawesome/react-fontawesome\";\n\nconst Wrapper = styled.div`\n    width: 332px;\n    margin: 50px 0;\n\n    @media screen and (min-width: 800px){\n        margin: 5% 20px;\n    }\n\n    @media screen and (min-width: 1150px){\n        width: 580px;\n        display: grid;\n        grid-template-rows: repeat(3, 0.8fr);\n        margin: 7% 20px;\n    }\n`;\n\ninterface TitleProps {\n    color: string\n}\n\nconst Title = styled.h1<TitleProps>`\n    width: 100%;\n    font-size: 41px;\n    font-weight: bold;\n    color: ${black};\n    margin: 30px 0;\n\n    span{\n        color: ${({ color }) => color};\n    }\n    \n    @media screen and (min-width: 1150px){\n        font-size: 55px;\n    }\n`;\n\nconst Description = styled.p`\n    font-size: 20px;\n    line-height: 40px;\n    color: ${black};\n\n    @media screen and (min-width: 1150px){\n        font-size: 18px;\n        width: 70%;\n    }\n`;\n\nconst Actions = styled.div`\n    margin-top: 39px;\n    width: 100%;\n    display: flex;\n    align-items: center;\n`;\n\ninterface InputProps {\n    color: string,\n    isBigButton?: boolean\n}\n\nconst Input = styled.input<InputProps>`\n    width: 173px;\n    height: 53px;\n    text-align: center;\n    font-size: 16px;\n    font-weight: 800;\n    background: transparent;\n    border-radius: 50vw;\n    color: ${({ color }) => color};\n    border: .2vw solid ${({ color }) => color};\n    text-transform: uppercase;\n\n    @media screen and (min-width: 1150px){\n        height: 66px;\n    }\n`;\n\nconst Button = styled.button<InputProps>`\n    cursor: pointer;\n    width: ${({ isBigButton }) => isBigButton ? 116 : 57}px;\n    height: 57px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background: ${({ color }) => color};\n    color: white;\n    font-size: 20px;\n    border-radius: 25vw;\n    border: none;\n    text-transform: uppercase;\n    font-weight: 800;\n    transition: \n        color 0.2s,\n        background 0.2s;\n\n\n    &:hover{\n        background: white;\n        color: ${({ color }) => color};\n        border: .15vw solid ${({ color }) => color};\n    }\n\n    ${({ isBigButton }) => !isBigButton && css`\n        margin-left: 20px;\n        \n        @media screen and (min-width: 800px){\n            width: 66px;\n            height: 66px;\n        }\n    `}\n\n    ${({ isBigButton }) => isBigButton && css`\n        @media screen and (min-width: 800px){\n            width: 156px;\n            height: 65px;\n        }\n    `}\n`;\n\nconst Section: FC<SectionProps> = ({ \n    color, \n    firstTitlePart, \n    secondTitlePart, \n    description ,\n    isInput,\n    isSmallButton,\n    smallButtonIcon,\n    isBigButton,\n    bigButtonText,\n    inputPlaceholder,\n    onBigButtonClick,\n    onSmallButtonClick\n}) => {\n    const [ inputValue, setInputValue ] = useState<string>(\"\");\n\n    const handleInputChange = ( e: ChangeEvent<HTMLInputElement> ) => {\n        e.preventDefault();\n        e.target.value.length < 6 && setInputValue(e.target.value.toUpperCase());\n    }\n\n    return(\n        <Wrapper>\n            <Title color={color}>\n                {firstTitlePart} <span>{secondTitlePart}</span>\n            </Title>\n            <Description>{description}</Description>\n            <Actions>\n                {isInput && \n                    <Input \n                        color={color} \n                        placeholder={inputPlaceholder}\n                        onChange={handleInputChange}\n                        value={inputValue}\n                    />\n                }\n                {isSmallButton && smallButtonIcon && onSmallButtonClick && (\n                    <Button \n                        color={color} \n                        isBigButton={!isSmallButton}\n                        onClick={() => onSmallButtonClick(inputValue)}\n                    >\n                        <FontAwesomeIcon icon={smallButtonIcon}/>\n                    </Button>\n                )}\n                {isBigButton && onBigButtonClick && (\n                    <Button \n                        color={color} \n                        isBigButton={isBigButton}\n                        onClick={() => onBigButtonClick(inputValue)}\n                    >\n                        {bigButtonText}\n                    </Button>   \n                )}\n            </Actions>\n        </Wrapper>\n    )\n}\n\ninterface SectionProps {\n    color: string,\n    firstTitlePart: string,\n    secondTitlePart: string,\n    description: string,\n    isInput?: boolean,\n    isSmallButton?: boolean,\n    smallButtonIcon?: FontAwesomeIconProps['icon'],\n    isBigButton?: boolean,\n    bigButtonText?: string,\n    inputPlaceholder?: string,\n    onBigButtonClick?: ( inputValue: string ) => void,\n    onSmallButtonClick?: ( inputValue: string ) => void\n}\n\nexport default Section;","import React, { FC, useContext, ChangeEvent } from \"react\";\nimport styled from \"styled-components\";\nimport { AppContext } from \"../App\";\nimport { black, blue, white } from \"../assets/colors\";\n\nconst Wrapper = styled.nav`\n    position: fixed;\n    display: flex;\n    background: ${white};\n    align-items: center;\n    z-index: 100;\n    top: 0;\n    left: 0;\n    display: flex;\n    width: 100%;\n    padding: 20px;\n    box-shadow: 00 2px 10px rgba(0, 0, 0, 0.2);\n\n    @media screen and (min-width: 1000px){\n        position: relative;\n        height: 176px;\n        padding: 60px;\n        box-shadow: none;\n    }\n\n    @media screen and (min-width: 1300px){\n        background: transparent;\n    }\n`;\n\nconst Selects = styled.div`\n    margin-left: auto;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n`;\n\nconst Brand = styled.span`\n    font-size: 22px;\n    font-weight: 900;\n    color: ${blue};\n\n    @media screen and (min-width: 1000px){\n        font-size: 35px;\n    }\n`;\n\nconst Input = styled.input`\n    width: 133px;\n    height: 45px;\n    text-align: center;\n    font-size: 16px;\n    font-weight: 800;\n    background: transparent;\n    border-radius: 50vw;\n    color: ${white};\n    background: ${black};\n    border: none;\n\n    @media screen and (min-width: 1000px){\n      width: 290px;\n      height: 60px;\n      font-size: 20px;\n    }\n\n    &::placeholder{\n      color: white;\n      opacity: 0.8;\n      font-weight: 400;\n    }\n`;\n\nconst Navbar: FC = () => {\n    const { setName } = useContext(AppContext);\n\n\n    return(\n        <Wrapper>\n            <Brand>Voice Call App</Brand>\n            <Selects>\n                <Input \n                    placeholder=\"Name...\"\n                    onChange={( e: ChangeEvent<HTMLInputElement> ) => setName(e.target.value)}\n                />\n            </Selects>\n\n        </Wrapper>\n    )\n}\n\nexport default Navbar;","import React, { FC } from \"react\";\nimport styled, { css } from \"styled-components\";\nimport { white } from \"../assets/colors\";\nimport { avatarURL } from \"../utils/constants\";\n\ninterface CallWindowUserProps {\n    bg: string | undefined\n}\n\nconst CallWindowUser = styled.div<CallWindowUserProps>`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n    width: 100%;\n    height: 100%;\n\n    ${({ bg }) => css`\n        background: ${bg};\n    `};\n`;\n\nconst Avatar = styled.img`\n    width: 15%;\n`;\n\nconst Nickname = styled.p`\n    font-size: 150%;\n    font-weight: 500;\n    color: ${white};\n    margin: 20px 0;\n`;\n\nconst CallUser: FC<CallUserProps> = ({ id, name, color }) => (\n    <CallWindowUser key={id} bg={color}>\n        <Avatar src={`${avatarURL}&name=${name}`}/>\n        <Nickname>{name}</Nickname>\n    </CallWindowUser>\n);\n\ninterface CallUserProps {\n    id: string | undefined,\n    name: string | undefined,\n    color: string | undefined\n}\n\nexport default CallUser;","export const avatarURL: string = \"https://eu.ui-avatars.com/api/?rounded=true&format=svg\";","import React, { FC, useEffect, useState, useRef } from \"react\";\nimport styled, { css } from \"styled-components\";\nimport gsap from \"gsap\"\nimport { useMediaQuery } from 'react-responsive'\nimport useVoice from \"../hooks/useRtc\";\nimport { blue, room } from \"../assets/colors\";\nimport CallUser from \"./CallUser\";\nimport Chat from \"./Chat\";\nimport { Name } from \"../utils/room\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faClipboard, faCommentDots, faPhoneSlash } from \"@fortawesome/free-solid-svg-icons\";\nimport ReactTooltip from \"react-tooltip\";\n\nconst Wrapper = styled.div`\n    position: fixed;\n    display: flex;\n    background: white;\n    flex-direction: row;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    z-index: -1;\n    opacity: 0;\n    background: ${room.light};\n`;\n\ninterface CallWindowProps {\n    usersCount: number | undefined;\n}\n\nconst RTCWindow = styled.div`\n    width: 100%;\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n`;\n\nconst CallWindow = styled.div<CallWindowProps>`\n    display: grid;\n    position: relative;\n    height: 85%;\n    width: 100%;\n    grid-template-columns: 1fr;\n    grid-template-rows: 1fr;\n    \n\n    @media screen and (min-width: 1150px){\n        height: 88%;\n        max-width: 100%;\n\n        ${({ usersCount }) => usersCount === 1 && css`\n            grid-template-columns: 1fr;\n            grid-template-rows: 1fr;\n        `}\n\n        ${({ usersCount }) => usersCount === 2 && css`\n            grid-template-columns: repeat(2, 1fr);\n        `}\n\n        ${({ usersCount }) => usersCount && usersCount > 2 && usersCount < 6 && css`\n            grid-template-columns: repeat(3, 1fr);\n            grid-template-rows: repeat(2, 1fr);\n        `}\n\n        ${({ usersCount }) => usersCount && usersCount === 6 && css`\n            grid-template-columns: repeat(3, 1fr);\n            grid-template-rows: repeat(2, 1fr);\n        `}\n\n        ${({ usersCount }) => usersCount && usersCount > 6 && css`\n            grid-template-columns: repeat(3, 1fr);\n            grid-template-rows: repeat(3, 1fr);\n        `}\n    }\n`;\n\nconst PanelButtons = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    position: relative;\n    bottom: 0;\n    width: 100%;\n    height: 15%;\n    background: ${room.darkest};\n\n    button{\n        font-size: 20px;\n        border-radius: 100vw;\n        border: none;\n        color: white;\n    }\n\n    @media screen and (min-width: 1150px){\n        max-width: 100%;\n        height: 12%;\n\n        button{\n            font-size: 1.2vw;\n        }\n    }\n`;\n\nconst LeaveButton = styled.button`\n    width: 90px;\n    height: 80px;\n    background: ${room.red};\n    margin: 0 10px;\n\n    @media screen and (min-width: 1150px){\n        width: 8vw;\n        height: 4vw;\n    }\n`;\n\nconst SimpleButton = styled.button`\n    width: 60px;\n    height: 60px;\n    background: ${blue};\n    margin: 0 10px;\n\n    @media screen and (min-width: 1150px){\n        width: 4vw;\n        height: 4vw;\n    }\n`;\n\nconst Room: FC = () => {\n    const [ chatState, setChatState ] = useState<boolean>(false);\n    \n    const isDesktop = useMediaQuery({\n        query: \"(min-width: 800px)\"\n    })\n\n    const wrapper = useRef<HTMLDivElement>(null);\n\n    const { leaveFromRoom, room } = useVoice();\n\n    useEffect(() => {\n        if(room){\n            gsap.set(wrapper.current, { zIndex: 120 });\n            gsap.to(wrapper.current, { duration: 0.2, ease: \"expo.inOut\", opacity: 1 });\n            \n            return;\n        }\n\n        gsap.to(wrapper.current, { duration: 0.2, ease: \"expo.inOut\", opacity: 0 }).then(() => {\n            gsap.set(wrapper.current, { zIndex: 0 });\n        })\n    }, [ room ])\n\n    const copyToClipboard = () => {\n        const temp = document.createElement('input');\n        document.body.appendChild(temp);\n\n        if(room) temp.value = room?.room;\n        temp.select();\n\n        document.execCommand('copy');\n        document.body.removeChild(temp);\n    }\n\n    const toggleChat = () => setChatState(( prev: boolean ) => !prev);\n    function click() {\n        let tmp : any = document.getElementById(\"audiorolldice\");\n        tmp.play();\n    }\n    return(\n        <Wrapper ref={wrapper}>\n            <RTCWindow>\n                <CallWindow usersCount={room?.peers.length}>\n                    {\n                        isDesktop ? room?.peers.map(({ id, name, color }: Name ) => \n                            <CallUser \n                                key={id}\n                                name={name} \n                                id={id} \n                                color={color}\n                            />\n                        ) : <CallUser \n                                name={room?.peers[0].name} \n                                id={room?.peers[0].id} \n                                color={room?.peers[0].color}\n                            />\n                    }\n                </CallWindow>\n                <PanelButtons>\n                    <LeaveButton \n                        onClick={() => leaveFromRoom()}\n                        data-tip=\"Leave from room\"\n                    >\n                        <FontAwesomeIcon icon={faPhoneSlash}/>\n                    </LeaveButton>\n                    {/* <SimpleButton \n                        onClick={copyToClipboard}\n                        data-tip=\"Copy code\"\n                    >\n                        <FontAwesomeIcon icon={faClipboard}/>\n                    </SimpleButton> */}\n                    {/* <SimpleButton \n                        onClick={toggleChat}\n                        data-tip=\"Toggle chat\"\n                    >\n                        <FontAwesomeIcon icon={faCommentDots}/>\n                    </SimpleButton> */}\n                </PanelButtons>\n            </RTCWindow>\n            {/* {chatState && <Chat/>} */}\n            <ReactTooltip />\n        </Wrapper>\n    )\n}\n\nexport default Room;","import React, { FC, createContext, useState, useEffect, useRef } from \"react\";\nimport styled, { createGlobalStyle } from \"styled-components\";\nimport { faPlus, faSignInAlt } from \"@fortawesome/free-solid-svg-icons\";\nimport { Helmet } from \"react-helmet\";\nimport { blue, white, orange, green } from \"./assets/colors\";\nimport useVoice from \"./hooks/useRtc\";\nimport Section from \"./components/Section\";\nimport Navbar from \"./components/Navbar\";\nimport Footer from \"./components/Footer\";\nimport Room from \"./components/Room\";\nimport { Connection, getUserRoom } from \"./utils/room\";\n\nconst Global = createGlobalStyle`\n  *,\n  *::before,\n  *::after {\n    font-family: 'Montserrat', sans-serif;\n    box-sizing: border-box;\n  }\n\n  ul,li,p,h1 {\n    margin: 0;\n    padding: 0;\n  }\n\n  body{\n    margin: 0;\n    background: ${white};\n  }\n\n  a,\n  a:hover,\n  a:active{\n    color: inherit;\n    text-decoration: inherit;\n  }\n\n  button {\n    cursor: pointer;\n  }\n`;\n\nconst Wrapper = styled.div`\n  position: relative;\n  width: 100%;\n  display: flex;\n  align-items: center;\n  flex-wrap: wrap;\n  flex-direction: column;\n  min-height: 100vh;\n`;\n\nconst Sections = styled.div`\n  position: relative;\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n  flex-direction: column;\n  margin-top: 80px;\n\n  @media screen and (min-width: 800px){\n    margin-top: 20%;\n  }\n\n  @media screen and (min-width: 1300px){\n    flex-direction: row;\n    justify-content: center;\n    align-items: center;\n    width: 90%;\n    margin: 0;\n  }\n`;\n\ninterface AppContextProps {\n  name: string | undefined,\n  setName: ( name: string ) => void,\n  userRoom: Connection | undefined,\n  setUserRoom: () => void,\n}\n\nexport const AppContext = createContext<AppContextProps>({\n  name: undefined,\n  setName: () => {},\n  userRoom: undefined,\n  setUserRoom: () => {}\n})\n\nconst App: FC = () => {\n  const [ name, setUsername ] = useState<string | undefined>(undefined);\n  const [ userConnection, setUserConnection ] = useState<Connection | undefined>();\n\n  const { connectToRoom, createRoom } = useVoice();\n\n  const fetchUserRoom = async () => {\n    const userConn: Connection | undefined = await getUserRoom();\n    userConn && setUserConnection(userConn);\n  }\n\n  const sections = useRef<HTMLDivElement>(null);\n\n  const setName = ( newName: string ) => setUsername(newName);\n\n  return(\n    <Wrapper>\n      <Helmet>\n        <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" />\n        <link \n          href=\"https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500;600;700;800&display=swap\" \n          rel=\"stylesheet\"\n        />\n      </Helmet>\n      <Global/> \n      <AppContext.Provider value={{\n        name,\n        setName,\n        userRoom: userConnection,\n        setUserRoom: fetchUserRoom\n      }}>\n        <Room />\n        <Navbar />\n\n        <Sections ref={sections}>\n          <Section\n            color={blue}\n            firstTitlePart=\"Join by\"\n            secondTitlePart=\"room id\"\n            description=\"You can easy join to your room by id shared by your friend or someone else you want\"\n            isInput={true}\n            isSmallButton={true}\n            smallButtonIcon={faSignInAlt}\n            inputPlaceholder={\"Code\"}\n            onSmallButtonClick={async ( id: string ) => {\n              await connectToRoom(id, name);\n              fetchUserRoom();\n            }}\n          />\n          {/* <Section\n            color={orange}\n            firstTitlePart=\"Join to\"\n            secondTitlePart=\"global\"\n            description=\"Do you want to meet someone, or just chill with random pepole ? It's your place\"\n            isBigButton={true}\n            bigButtonText=\"JOIN\"\n            onBigButtonClick={async () => {\n              await connectToRoom(\"GLOBAL\", name);\n              fetchUserRoom();\n            }}\n          /> */}\n          {/* <Section\n            color={green}\n            firstTitlePart=\"Make your\"\n            secondTitlePart=\"room\"\n            description=\"It's seems u want to create your room right ? Ha. Got You. Just write your code and share it\"\n            isInput={true}\n            isSmallButton={true}\n            smallButtonIcon={faPlus}\n            inputPlaceholder={\"Code... Again\"}\n            onSmallButtonClick={async ( id: string ) => {\n              await createRoom(id, name);\n              await connectToRoom(id, name);\n              fetchUserRoom();\n            }}\n          /> */}\n        </Sections>\n      </AppContext.Provider>\n    </Wrapper>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}